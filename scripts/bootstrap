#!/bin/bash
# set up the environment and project dependencies

# fail fast and loud
set -e

projectroot=$(dirname "$0")/..

echo "Bootstrapping Socorro."
git submodule update --init --recursive

if [[ "$PATH" =~ "pgsql" ]]; then
  pgsqlonpath=true
fi

pgsqlonpath=

# breakpad
if [[ ! -d stackwalk ]]; then
  printf "%s\n" $'

Breakpad not detected! Downloading a pre-built version of breakpad for
centOS/RHEL that will work with release versions of socorro and the provided
Vagrant box.

If you need to build your own version, run the following commands after
the bootstrap script finishes:

  rm -rf breakpad.tar.gz breakpad stackwalk
  PREFIX=`pwd`/stackwalk/ SKIP_TAR=1 ./scripts/build-breakpad.sh
  cd minidump-stackwalk; make clean && make && cp stackwalker ../stackwalk/bin'

  freshbreakpad=true
  wget --quiet 'https://ci.mozilla.org/job/breakpad/lastSuccessfulBuild/artifact/breakpad.tar.gz'
  tar -zxf breakpad.tar.gz
  mv breakpad stackwalk
fi


# stackwalker
if [[ ! -d stackwalk/bin ]]; then
  printf "%s\n" $'

Stackwalker not detected! Building now using the current breakpad.'
  if [ $freshbreakpad ]; then
    printf "%s\n" $'

If you build your own breakpad, you\'ll need to rebuild stackwalker after
you\'re done:

  cd minidump-stackwalk; make
  cp minidump-stackwalk/stackwalker stackwalk/bin'
  fi
  # Build JSON stackwalker
  # Depends on breakpad, run "make breakpad" if you don't have it yet
  cd minidump-stackwalk; make
  cp minidump-stackwalk/stackwalker stackwalk/bin
  cd $projectroot
fi


# analysis
# changes infrequently and devs almost never need it
if [[ "$(ls analysis/ | grep 'jar' | wc -l)" == 0 ]]; then
  printf "%s\n" $'

Analysis tools not found! Building them now. If this is a developer install,
you only need to build the developer tools if you\'re working on them. You can
skip this step in the future by creating any ol\' jar file in the analysis dir:

  touch analysis/jar'
  if [[ ! "$(type -P mvn)" ]]; then
    printf "%s\n" $'

mvn must be installed and on your path to build the analysis tools. Install mvn
and try again.'
    exit 1
  fi
  git submodule update --init socorro-toolbox akela
  cd akela && mvn package
  cd $projectroot
  cd socorro-toolbox && mvn package
  cd $projectroot
  mkdir -p analysis
  rsync socorro-toolbox/target/*.jar analysis/
  rsync akela/target/*.jar analysis/
  rsync -a socorro-toolbox/src/main/pig/ analysis/
fi


#bootstrap
if [[ ! "$(type -P lessc)" ]]; then
  printf "%s\n" $'
lessc not found! less must be installed and lessc on your path to build socorro.
Try:

  sudo npm install -g less'
  exit 1
fi

if [[ ! "$VIRTUAL_ENV" ]]; then
  VIRTUAL_ENV=$(readlink -m $(dirname "$0")/../socorro-virtualenv)
  printf "%s\n" $"
No virtualenv detected! Creating one now at $VIRTUAL_ENV"
  virtualenv -p python2.6 $VIRTUAL_ENV
  freshvirtualenv=true
fi

echo "Installing dependencies."
$VIRTUAL_ENV/bin/pip install tools/peep-0.8.tar.gz
$VIRTUAL_ENV/bin/peep install --download-cache=./pip-cache -r requirements.txt
printf "\nBootrap finished.\n"

# bootstrap produces lots of output, so anything that requires user action
# after the script finishes should be put at the end of the output
if [ ! $pgsqlonpath ] || [ $freshvirtualenv ]; then
  printf "\n\e[1;35mThere are a few things you need to do before continuing:\n"
fi
if [ ! $pgsqlonpath ]; then
  printf '\e[0;32mpgsql not found on $PATH.

You will need to set up and configure Postgres before continuing beyond this
bootstrap step. For full instructions, see:
\e[1;31m
  http://socorro.readthedocs.org/en/latest/installation.html#setting-up-environment
\e[0m
'
fi
if [ $freshvirtualenv ]; then
  printf "
\e[0;32mA new virtualenv was created for you. You should activate it before you
continue. Run the following:
\e[1;31m
    source $VIRTUAL_ENV/bin/activate
\e[0m
"
fi
