# Hi there!
#
# The changes you probably want to focus on first are...
#   * all the changes that currently default to "localhost" or something
#     (like MWARE_BASE_URL, ALLOWED_HOSTS, BROWSERID_AUDIENCES)
#   * SECRET_KEY needs to be set
#   * DATABASES neesd to be set
#   * If you don't use HTTPS, change SESSION_COOKIE_SECURE
#

# These settings overrides what's in settings/base.py
# This file is geared towards running Socorro in production

CACHE_MIDDLEWARE = True
CACHE_MIDDLEWARE_FILES = False

# Socorro middleware instance to use
MWARE_BASE_URL = 'http://localhost:8883'
MWARE_USERNAME = None
MWARE_PASSWORD = None
# HTTP/1.1 Host header to pass - in case this is a VHost
MWARE_HTTP_HOST = None

DEFAULT_PRODUCT = 'Firefox'

# can be changed from null to log to test something locally
# or if using the debug toolbar, you might give toolbar a try
STATSD_CLIENT = 'django_statsd.clients.null'

# for local development these don't matter
STATSD_HOST = 'localhost'
STATSD_PORT = 8125
STATSD_PREFIX = None

# Uncomment out these to use anything else other than the
# memcache server settings in base.py
#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#        'LOCATION': 'crashstats'
#    }
#}

# Change if your database isn't using UTC
#TIME_ZONE = 'UTC'

# By default, use sqlite but in production you probably want to
# connect to a postgresql database for all things django needs.
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'socorro',
#        'USER': '',
#        'PASSWORD': '',
#        'HOST': '',
#        'PORT': '',
#        'OPTIONS': {
#        },
#        'TEST_CHARSET': 'utf8',
#        'TEST_COLLATION': 'utf8_general_ci',
#    },
#    # 'slave': {
#    #     ...
#    # },
#}


# Uncomment this and set to all slave DBs in use on the site.
# SLAVE_DATABASES = ['slave']

# Recipients of traceback emails and other notifications.
ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)
MANAGERS = ADMINS

# Debugging displays nice error messages, but leaks memory. Set this to False
# on all server instances and True only for development.
DEBUG = TEMPLATE_DEBUG = DEBUG_PROPAGATE_EXCEPTIONS = False

# Is this a development instance? Set this to True on development/master
# instances and False on stage/prod.
DEV = False

# By default compression is done in runtime, if you enable
# offline compression, the work only needs to be done once during
# deployment.
# But you'll need to remember to first run:
#     ./manage.py collectstatic --noinput
#     ./manage.py compress_jingo --force
# at least once every time any of the static files change.
COMPRESS_OFFLINE = True

# # Playdoh ships with sha512 password hashing by default. Bcrypt+HMAC is
# # safer, so it is recommended. Please read <http://git.io/0xqJPg>, then
# # switch this to bcrypt and pick a secret HMAC key for your application.
# PWD_ALGORITHM = 'bcrypt'
# HMAC_KEYS = {  # for bcrypt only
#     '2011-01-01': 'cheesecake',
# }

# Make this unique, and don't share it with anybody.  It cannot be blank.
SECRET_KEY = 'you must change this'

## Log settings

# SYSLOG_TAG = "http_app_playdoh"  # Make this unique to your project.
#import logging
#LOGGING = dict(loggers=dict(playdoh={'level': logging.DEBUG}))

# Common Event Format logging parameters
#CEF_PRODUCT = 'Playdoh'
#CEF_VENDOR = 'Mozilla'

# If you intend to run without HTTPS such as local development,
# then set this to False
SESSION_COOKIE_SECURE = True

# To get your Sentry key, go to https://errormill.mozilla.org/
#RAVEN_CONFIG = {
#    'dsn': ''  # see https://errormill.mozilla.org/
#}

# Specify the middleware implementation to use in the middleware
#SEARCH_MIDDLEWARE_IMPL = 'elasticsearch'

# Make this match the URL you intend to use for the site
BROWSERID_AUDIENCES = ['http://localhost:8000']

# Optional Google Analytics ID
#GOOGLE_ANALYTICS_ID = "UA-XXXXX-X"
# Root domain. Required iff you're providing an analytics ID.
#GOOGLE_ANALYTICS_DOMAIN = 'auto'

# If you crashstats behind a load balancer, your `REMOTE_ADDR` header
# will be that of the load balancer instead of the actual user.
# The solution is to instead rely on the `X-Forwarded-For` header.
# You ONLY want this if you know you can trust `X-Forwarded-For`.
# (Note! Make sure you uncomment the line `from . import base` at
# the top of this file first)
#base.MIDDLEWARE_CLASSES += (
#    'crashstats.crashstats.middleware.SetRemoteAddrFromForwardedFor',
#)

# Ensure that the uploaded file is effectively g+rw while preserving the group
# ownership inherited from system.
# See
# https://docs.djangoproject.com/en/dev/topics/http/\
#  file-uploads/#changing-upload-handler-behavior
#FILE_UPLOAD_PERMISSIONS = 0664

# When you don't have permission to upload Symbols you might be confused
# what to do next. On the page that explains that you don't have permission
# there's a chance to put a link.
#SYMBOLS_PERMISSION_HINT_LINK = {
#    'url': 'https://bugzilla.mozilla.org/enter_bug.cgi?product=Socorro&'
#           'component=General&groups=client-services-security',
#    'label': 'File a bug in bugzilla'
#}

# This setting needs to match the hostnames used
ALLOWED_HOSTS = ['localhost:8000']
