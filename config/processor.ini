# name: application
# doc: the fully qualified module or class of the application
# converter: configman.converters.class_converter
# application='ProcessorApp'

[destination]

    # name: crashstorage
    # doc: the destination storage class
    # converter: configman.converters.class_converter
    crashstorage='socorro.external.crashstorage_base.PolyCrashStorage'

    # name: storage_classes
    # doc: a comma delimited list of storage classes
    # converter: configman.converters.class_list_converter
    storage_classes='socorro.external.postgresql.crashstorage.PostgreSQLCrashStorage, socorro.external.filesystem.crashstorage.FileSystemCrashStorage'

    [[storage0]]

        # name: crashstorage_class
        # doc: the source storage class
        # converter: configman.converters.class_converter
        crashstorage_class='socorro.external.filesystem.crashstorage.FileSystemCrashStorage'

        +include /etc/socorro/filesystem_storage.ini

    [[storage1]]

        # database stuff
        +include /etc/socorro/processor_postgres.ini

        # name: store
        # doc: None
        # converter: configman.converters.class_converter
        store='socorro.external.postgresql.crashstorage.PostgreSQLCrashStorage'


[logging]
    +include /etc/socorro/logging.ini

    # name: stderr_error_logging_level
    # doc: logging level for the logging to stderr (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    stderr_error_logging_level='10'

    # name: syslog_error_logging_level
    # doc: logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    syslog_error_logging_level='10'

[new_crash_source]

    # name: batchJobLimit
    # doc: the number of jobs to pull in a time
    # converter: int
    batchJobLimit='10000'

    # name: new_crash_source_class
    # doc: an iterable that will stream crash_ids needing processing
    # converter: configman.converters.class_converter
    new_crash_source_class='socorro.processor.legacy_new_crash_source.LegacyNewCrashSource'

    # name: database_class
    # doc: the class of the job_manager's database
    # converter: configman.converters.class_converter
    database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: transaction_executor_class
    # doc: a class that will manage the job_manager's transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

    # get postgres connection parameters
    +include /etc/socorro/processor_postgres.ini

[processor]

    # name: collect_addon
    # doc: boolean indictating if information about add-ons should be collected
    # converter: configman.converters.boolean_converter
    collect_addon='True'

    # name: collect_crash_process
    # doc: boolean indictating if information about process type should be collected
    # converter: configman.converters.boolean_converter
    collect_crash_process='True'

    # name: crashing_thread_frame_threshold
    # doc: the number of frames to keep in the raw dump for the crashing thread
    # converter: int
    crashing_thread_frame_threshold='100'

    # name: crashing_thread_tail_frame_threshold
    # doc: the number of frames to keep in the raw dump at the tail of the frame list
    # converter: int
    crashing_thread_tail_frame_threshold='10'

    # name: database_class
    # doc: the class of the job_manager's database
    # converter: configman.converters.class_converter
    database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: transaction_executor_class
    # doc: a class that will manage the job_manager's transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

    # get postgres connection parameters
    +include /etc/socorro/processor_postgres.ini

    # name: processor_class
    # doc: the class that transforms raw crashes into processed crashes
    # converter: configman.converters.class_converter
    processor_class='socorro.processor.legacy_processor.LegacyCrashProcessor'

    +include /etc/socorro/processor_local.ini


    [[c_signature]]

        # name: c_signature_tool_class
        # doc: the class that can generate a C signature
        # converter: configman.converters.class_converter
        c_signature_tool_class='socorro.processor.signature_utilities.CSignatureTool'

        +include /etc/socorro/processor_c_signatures.ini

    [[java_signature]]

        # name: java_signature_tool_class
        # doc: the class that can generate a Java signature
        # converter: configman.converters.class_converter
        java_signature_tool_class='socorro.processor.signature_utilities.JavaSignatureTool'

[producer_consumer]

    # name: idle_delay
    # doc: the delay in seconds if no job is found
    # converter: int
    idle_delay='7'

    +include /etc/socorro/processor_threads.ini

    # name: producer_consumer_class
    # doc: the class implements a threaded producer consumer queue
    # converter: configman.converters.class_converter
    producer_consumer_class='socorro.lib.threaded_task_manager.ThreadedTaskManager'

[registrar]

    # name: check_in_frequency
    # doc: how often the processor is required to reregister (hh:mm:ss)
    # converter: configman.converters.timedelta_converter
    check_in_frequency='0:0:5:0'

    # name: database_class
    # doc: the class of the job_manager's database
    # converter: configman.converters.class_converter
    database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: transaction_executor_class
    # doc: a class that will manage the job_manager's transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

    # get postgres connection parameters
    +include /etc/socorro/processor_postgres.ini

    # name: processor_id
    # doc: the id number for the processor (must already exist) (0 for create new Id, "auto" for autodetection, "host" for same host)
    # converter: str
    processor_id='host'

    # name: registrar_class
    # doc: the class that registers and tracks processors
    # converter: configman.converters.class_converter
    registrar_class='socorro.processor.registration_client.ProcessorAppRegistrationClient'

[source]

    # name: crashstorage_class
    # doc: the source storage class
    # converter: configman.converters.class_converter
    crashstorage_class='socorro.external.filesystem.crashstorage.FileSystemCrashStorage'

    +include /etc/socorro/filesystem_storage.ini
