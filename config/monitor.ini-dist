# name: application
# doc: the fully qualified module or class of the application
# converter: configman.converters.class_converter
# application='MonitorApp'

[job_manager]

    # name: database_class
    # doc: the class of the job_manager's database
    # converter: configman.converters.class_converter
    database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: database_host
    # doc: the hostname of the database
    # converter: str
    database_host='localhost'

    # name: database_name
    # doc: the name of the database
    # converter: str
    database_name='breakpad'

    # name: database_password
    # doc: the user's database password
    # converter: str
    database_password='aPassword'

    # name: database_port
    # doc: the port for the database
    # converter: int
    database_port='5432'

    # name: database_user
    # doc: the name of the user within the database
    # converter: str
    database_user='breakpad_rw'

    # name: job_cleanup_frequency
    # doc: the frequency to check for new jobs (hh:mm:ss)
    # converter: timedelta_to_seconds_coverter
    job_cleanup_frequency='300'

    # name: priority_loop_frequency
    # doc: the frequency to check for new priority jobs (hh:mm:ss)
    # converter: timedelta_to_seconds_coverter
    priority_loop_frequency='30'

    # name: standard_loop_frequency
    # doc: the frequency to check for new jobs (hh:mm:ss)
    # converter: timedelta_to_seconds_coverter
    standard_loop_frequency='120'

    # name: transaction_executor_class
    # doc: a class that will manage the job_manager's transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

[logging]

    # name: stderr_error_logging_level
    # doc: logging level for the logging to stderr (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    stderr_error_logging_level='10'

    # name: stderr_line_format_string
    # doc: python logging system format for logging to stderr
    # converter: str
    stderr_line_format_string='{asctime} {levelname} - {threadName} - {message}'

    # name: syslog_error_logging_level
    # doc: logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    syslog_error_logging_level='40'

    # name: syslog_facility_string
    # doc: syslog facility string ("user", "local0", etc)
    # converter: str
    syslog_facility_string='user'

    # name: syslog_host
    # doc: syslog hostname
    # converter: str
    syslog_host='localhost'

    # name: syslog_line_format_string
    # doc: python logging system format for syslog entries
    # converter: str
    syslog_line_format_string='monitor (pid {process}): {asctime} {levelname} - {threadName} - {message}'

    # name: syslog_port
    # doc: syslog port
    # converter: int
    syslog_port='514'

[new_crash_source]

    # name: crashstorage_class
    # doc: the class of the crashstorage system
    # converter: configman.converters.class_converter
    crashstorage_class='socorro.external.filesystem.crashstorage.FileSystemRawCrashStorage'

    # name: dir_permissions
    # doc: a number used for permissions for directories in the local file system
    # converter: int
    dir_permissions='504'

    # name: dump_dir_count
    # doc: the number of dumps to be stored in a single directory in the local file system
    # converter: int
    dump_dir_count='1024'

    # name: dump_file_suffix
    # doc: the suffix used to identify a dump file
    # converter: str
    dump_file_suffix='.dump'

    # name: dump_gid
    # doc: the group ID for saved crashes in local file system (optional)
    # converter: str
    dump_gid=''

    # name: dump_permissions
    # doc: a number used for permissions crash dump files in the local file system
    # converter: int
    dump_permissions='432'

    # name: json_file_suffix
    # doc: the suffix used to identify a json file
    # converter: str
    json_file_suffix='.json'

    # name: new_crash_source_class
    # doc: an iterable that will stream crash_ids needing processing
    # converter: configman.converters.class_converter
    new_crash_source_class='socorro.monitor.crashstore_new_crash_source.CrashStorageNewCrashSource'

    # name: std_fs_root
    # doc: a path to a local file system
    # converter: str
    std_fs_root='/home/socorro/primaryCrashStore'

[registrar]

    # name: check_in_frequency
    # doc: how often the processor is required to reregister (hh:mm:ss)
    # converter: configman.converters.timedelta_converter
    check_in_frequency='0:0:1:0'

    # name: database_class
    # doc: the class of the registrar's database
    # converter: configman.converters.class_converter
    database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: database_host
    # doc: the hostname of the database
    # converter: str
    database_host='localhost'

    # name: database_name
    # doc: the name of the database
    # converter: str
    database_name='breakpad'

    # name: database_password
    # doc: the user's database password
    # converter: str
    database_password='aPassword'

    # name: database_port
    # doc: the port for the database
    # converter: int
    database_port='5432'

    # name: database_user
    # doc: the name of the user within the database
    # converter: str
    database_user='breakpad_rw'

    # name: processor_grace_period
    # doc: a processor is dead if it is this late to renew registration
    # converter: configman.converters.timedelta_converter
    processor_grace_period='0:0:2:0'

    # name: quit_if_no_processors
    # doc: die if there are no live processors running
    # converter: configman.converters.boolean_converter
    quit_if_no_processors='False'

    # name: sweep_frequency
    # doc: frequency for cleaning up dead processors
    # converter: timedelta_to_seconds_coverter
    sweep_frequency='120'

    # name: transaction_executor_class
    # doc: a class that will manage the registrar's transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

