# name: application
# doc: the fully qualified module or class of the application
# converter: configman.converters.class_converter
#application='ProcessorApp'

[destination]

    # name: crashstorage_class
    # doc: the destination storage class
    # converter: configman.converters.class_converter
    crashstorage_class='socorro.external.crashstorage_base.PolyCrashStorage'

    # name: storage_classes
    # doc: a comma delimited list of storage classes
    # converter: configman.converters.class_list_converter
    storage_classes='socorro.external.filesystem.crashstorage.FileSystemCrashStorage, socorro.external.postgresql.crashstorage.PostgreSQLCrashStorage'

    [[storage0]]

        # name: crashstorage_class
        # doc: None
        # converter: configman.converters.class_converter
        crashstorage_class='socorro.external.postgresql.crashstorage.PostgreSQLCrashStorage'

        # name: database_class
        # doc: the class responsible for connecting toPostgres
        # converter: configman.converters.class_converter
        database_class='socorro.external.postgresql.connection_context.ConnectionContext'

        # name: database_host
        # doc: the hostname of the database
        # converter: str
        database_host='localhost'

        # name: database_name
        # doc: the name of the database
        # converter: str
        database_name='breakpad'

        # name: database_password
        # doc: the user's database password
        # converter: str
        database_password='aPassword'

        # name: database_port
        # doc: the port for the database
        # converter: int
        database_port='5432'

        # name: database_user
        # doc: the name of the user within the database
        # converter: str
        database_user='breakpad_rw'

        # name: transaction_executor_class
        # doc: a class that will manage transactions
        # converter: configman.converters.class_converter
        transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

    [[storage1]]

        # name: crashstorage_class
        # doc: None
        # converter: configman.converters.class_converter
        crashstorage_class='socorro.external.filesystem.crashstorage.FileSystemCrashStorage'

        # name: date_name
        # doc: the relative path to the top of the date storage tree from root parameter
        # converter: str
        date_name='date'

        # name: def_fs_root
        # doc: a path to a local file system
        # converter: str
        def_fs_root='./deferredCrashStore'

        # name: dir_permissions
        # doc: a number used for permissions for directories in the local file system
        # converter: int
        dir_permissions='504'

        # name: dump_dir_count
        # doc: the number of dumps to be stored in a single directory in the local file system
        # converter: int
        dump_dir_count='1024'

        # name: dump_file_suffix
        # doc: the suffix used to identify a dump file
        # converter: str
        dump_file_suffix='.dump'

        # name: dump_gid
        # doc: the group ID for saved crashes in local file system (optional)
        # converter: str
        dump_gid=''

        # name: dump_permissions
        # doc: a number used for permissions crash dump files in the local file system
        # converter: int
        dump_permissions='432'

        # name: forbidden_keys
        # doc: a comma delimited list of keys to not allowed in the processed crash
        # converter: socorro.external.filesystem.crashstorage.<lambda>
        forbidden_keys='url, email, user_id, exploitability'

        # name: gzip_compression_level
        # doc: the level of compression to use
        # converter: int
        gzip_compression_level='9'

        # name: index_name
        # doc: the relative path to the top of the name storage tree from root parameter
        # converter: str
        index_name='name'

        # name: json_file_suffix
        # doc: the suffix used to identify a json file
        # converter: str
        json_file_suffix='.json'

        # name: minutes_per_slot
        # doc: the number of minutes in the lowest date directory
        # converter: int
        minutes_per_slot='1'

        # name: pro_fs_root
        # doc: a path to a local file system for processed storage
        # converter: str
        pro_fs_root='./processedCrashStore'

        # name: processed_crash_file_suffix
        # doc: the processed crash filename suffix
        # converter: str
        processed_crash_file_suffix='.jsonz'

        # name: std_fs_root
        # doc: a path to a local file system
        # converter: str
        std_fs_root='./primaryCrashStore'

        # name: storage_depth
        # doc: the length of branches in the radix storage tree
        # converter: int
        storage_depth='2'

        # name: sub_slot_count
        # doc: distribute data evenly among this many sub timeslots
        # converter: int
        sub_slot_count='1'

[logging]

    # name: stderr_error_logging_level
    # doc: logging level for the logging to stderr (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    stderr_error_logging_level='10'

    # name: stderr_line_format_string
    # doc: python logging system format for logging to stderr
    # converter: str
    stderr_line_format_string='{asctime} {levelname} - {threadName} - {message}'

    # name: syslog_error_logging_level
    # doc: logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    syslog_error_logging_level='40'

    # name: syslog_facility_string
    # doc: syslog facility string ("user", "local0", etc)
    # converter: str
    syslog_facility_string='user'

    # name: syslog_host
    # doc: syslog hostname
    # converter: str
    syslog_host='localhost'

    # name: syslog_line_format_string
    # doc: python logging system format for syslog entries
    # converter: str
    syslog_line_format_string='processor (pid {process}): {asctime} {levelname} - {threadName} - {message}'

    # name: syslog_port
    # doc: syslog port
    # converter: int
    syslog_port='514'

[new_crash_source]

    # name: batchJobLimit
    # doc: the number of jobs to pull in a time
    # converter: int
    batchJobLimit='10000'

    # name: database_class
    # doc: the class of the database
    # converter: configman.converters.class_converter
    database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: database_host
    # doc: the hostname of the database
    # converter: str
    database_host='localhost'

    # name: database_name
    # doc: the name of the database
    # converter: str
    database_name='breakpad'

    # name: database_password
    # doc: the user's database password
    # converter: str
    database_password='aPassword'

    # name: database_port
    # doc: the port for the database
    # converter: int
    database_port='5432'

    # name: database_user
    # doc: the name of the user within the database
    # converter: str
    database_user='breakpad_rw'

    # name: new_crash_source_class
    # doc: an iterable that will stream crash_ids needing processing
    # converter: configman.converters.class_converter
    new_crash_source_class='socorro.processor.legacy_new_crash_source.LegacyNewCrashSource'

    # name: transaction_executor_class
    # doc: a class that will manage transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

[processor]

    # name: collect_addon
    # doc: boolean indictating if information about add-ons should be collected
    # converter: configman.converters.boolean_converter
    collect_addon='True'

    # name: collect_crash_process
    # doc: boolean indictating if information about process type should be collected
    # converter: configman.converters.boolean_converter
    collect_crash_process='True'

    # name: crashing_thread_frame_threshold
    # doc: the number of frames to keep in the raw dump for the crashing thread
    # converter: int
    crashing_thread_frame_threshold='100'

    # name: crashing_thread_tail_frame_threshold
    # doc: the number of frames to keep in the raw dump at the tail of the frame list
    # converter: int
    crashing_thread_tail_frame_threshold='10'

    # name: database_class
    # doc: the class of the database
    # converter: configman.converters.class_converter
    database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: database_host
    # doc: the hostname of the database
    # converter: str
    database_host='localhost'

    # name: database_name
    # doc: the name of the database
    # converter: str
    database_name='breakpad'

    # name: database_password
    # doc: the user's database password
    # converter: str
    database_password='aPassword'

    # name: database_port
    # doc: the port for the database
    # converter: int
    database_port='5432'

    # name: database_user
    # doc: the name of the user within the database
    # converter: str
    database_user='breakpad_rw'

    # name: dump_field
    # doc: the default name of a dump
    # converter: str
    dump_field='upload_file_minidump'

    # name: exploitability_tool_command_line
    # doc: the template for the command to invoke the exploitability tool
    # converter: str
    exploitability_tool_command_line='$exploitability_tool_pathname $dumpfilePathname 2>/dev/null'

    # name: exploitability_tool_pathname
    # doc: the full pathname of the extern program exploitability tool (quote path with embedded spaces)
    # converter: str
    exploitability_tool_pathname='/data/socorro/stackwalk/bin/exploitability'

    # name: known_flash_identifiers
    # doc: A subset of the known "debug identifiers" for flash versions, associated to the version
    # converter: json.loads
    # NOTE: commented out to let the default stand without change
    #known_flash_identifiers=''

    # name: minidump_stackwalk_pathname
    # doc: the full pathname of the extern program minidump_stackwalk (quote path with embedded spaces)
    # converter: str
    minidump_stackwalk_pathname='/data/socorro/stackwalk/bin/minidump_stackwalk'

    # name: processor_class
    # doc: the class that transforms raw crashes into processed crashes
    # converter: configman.converters.class_converter
    processor_class='socorro.processor.legacy_processor.LegacyCrashProcessor'

    # name: processor_symbols_pathname_list
    # doc: comma or space separated list of symbol files for minidump_stackwalk (quote paths with embedded spaces)
    # converter: socorro.processor.legacy_processor.create_symbol_path_str
    processor_symbols_pathname_list='/mnt/socorro/symbols/symbols_ffx /mnt/socorro/symbols/symbols_sea /mnt/socorro/symbols/symbols_tbrd /mnt/socorro/symbols/symbols_sbrd /mnt/socorro/symbols/symbols_os'

    # name: stackwalk_command_line
    # doc: the template for the command to invoke minidump_stackwalk
    # converter: str
    stackwalk_command_line='$minidump_stackwalk_pathname -m $dumpfilePathname $processor_symbols_pathname_list 2>/dev/null'

    # name: symbol_cache_path
    # doc: the path where the symbol cache is found (quote path with embedded spaces)
    # converter: str
    symbol_cache_path='/mnt/socorro/symbols'

    # name: transaction_executor_class
    # doc: a class that will manage transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

    [[c_signature]]

        # name: c_signature_tool_class
        # doc: the class that can generate a C signature
        # converter: configman.converters.class_converter
        c_signature_tool_class='socorro.processor.signature_utilities.CSignatureTool'

        # name: irrelevant_signature_re
        # doc: a regular expression matching frame signatures that should be ignored when generating an overall signature
        # converter: str
        # NOTE: commented out to let the default stand without change
        #irrelevant_signature_re=''

        # name: prefix_signature_re
        # doc: a regular expression matching frame signatures that should always be coupled with the following frame signature when generating an overall signature
        # converter: str
        # NOTE: commented out to let the default stand without change
        #prefix_signature_re=''

        # name: signature_sentinels
        # doc: a list of frame signatures that should always be considered top of the stack if present in the stack
        # converter: eval
        # NOTE: commented out to let the default stand without change
        #signature_sentinels=''

        # name: signatures_with_line_numbers_re
        # doc: any signatures that match this list should be combined with their associated source code line numbers
        # converter: str
        signatures_with_line_numbers_re='js_Interpret'

    [[java_signature]]

        # name: java_signature_tool_class
        # doc: the class that can generate a Java signature
        # converter: configman.converters.class_converter
        java_signature_tool_class='socorro.processor.signature_utilities.JavaSignatureTool'

[producer_consumer]

    # name: idle_delay
    # doc: the delay in seconds if no job is found
    # converter: int
    idle_delay='7'

    # name: maximum_queue_size
    # doc: the maximum size of the internal queue
    # converter: int
    maximum_queue_size='8'

    # name: number_of_threads
    # doc: the number of threads
    # converter: int
    number_of_threads='4'

    # name: producer_consumer_class
    # doc: the class implements a threaded producer consumer queue
    # converter: configman.converters.class_converter
    producer_consumer_class='socorro.lib.threaded_task_manager.ThreadedTaskManager'

[registrar]

    # name: check_in_frequency
    # doc: how often the processor is required to reregister (hh:mm:ss)
    # converter: configman.converters.timedelta_converter
    check_in_frequency='00:00:01:00'

    # name: database
    # doc: the class of the registrar's database
    # converter: configman.converters.class_converter
    database='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: database_host
    # doc: the hostname of the database
    # converter: str
    database_host='localhost'

    # name: database_name
    # doc: the name of the database
    # converter: str
    database_name='breakpad'

    # name: database_password
    # doc: the user's database password
    # converter: str
    database_password='aPassword'

    # name: database_port
    # doc: the port for the database
    # converter: int
    database_port='5432'

    # name: database_user
    # doc: the name of the user within the database
    # converter: str
    database_user='breakpad_rw'

    # name: processor_id
    # doc: the id number for the processor (must already exist) (0 for create new Id, "auto" for autodetection, "host" for same host, "forcehost" for hostile take over)
    # converter: str
    processor_id='forcehost'

    # name: registrar_class
    # doc: the class that registers and tracks processors
    # converter: configman.converters.class_converter
    registrar_class='socorro.processor.registration_client.ProcessorAppRegistrationClient'

    # name: transaction_executor_class
    # doc: a class that will manage transactions
    # converter: configman.converters.class_converter
    transaction_executor_class='socorro.database.transaction_executor.TransactionExecutor'

[source]

    # name: crashstorage_class
    # doc: the source storage class
    # converter: configman.converters.class_converter
    crashstorage_class='socorro.external.filesystem.crashstorage.FileSystemRawCrashStorage'

    # name: dir_permissions
    # doc: a number used for permissions for directories in the local file system
    # converter: int
    dir_permissions='504'

    # name: dump_dir_count
    # doc: the number of dumps to be stored in a single directory in the local file system
    # converter: int
    dump_dir_count='1024'

    # name: dump_file_suffix
    # doc: the suffix used to identify a dump file
    # converter: str
    dump_file_suffix='.dump'

    # name: dump_gid
    # doc: the group ID for saved crashes in local file system (optional)
    # converter: str
    dump_gid=''

    # name: dump_permissions
    # doc: a number used for permissions crash dump files in the local file system
    # converter: int
    dump_permissions='432'

    # name: json_file_suffix
    # doc: the suffix used to identify a json file
    # converter: str
    json_file_suffix='.json'

    # name: std_fs_root
    # doc: a path to a local file system
    # converter: str
    std_fs_root='./primaryCrashStore'

