# name: application
# doc: the fully qualified module or class of the application
# converter: configman.converters.class_converter
# Inspect the automatically written value below to make sure it is valid
#   as a Python object for its intended converter function.
# application='MiddlewareApp'

[database]

    # if you'd like to have one common database configuration for the
    # all or a subset of the apps, uncomment the +include line below
    # and edit the 'common_database.ini' file instead of using the individual
    # values below.
    #+include /absolute/path/to/common_database.ini
    # or
    #+include ./relative/path/to/common_database.ini

    # name: database_host
    # doc: the hostname of the database
    # converter: str
    # OPS - set once
    #database_host='localhost'

    # name: database_name
    # doc: the name of the database
    # converter: str
    # OPS - set once
    #database_name='breakpad'

    # name: database_password
    # doc: the user's database password
    # converter: str
    # OPS - set once
    #database_password='aPassword'

    # name: database_port
    # doc: the port for the database
    # converter: int
    # OPS - set once
    #database_port='5432'

    # name: database_user
    # doc: the name of the user within the database
    # converter: str
    # OPS - set once
    #database_user='breakpad_rw'

    # name: database_class
    # doc: None
    # converter: configman.converters.class_converter
    #database_class='socorro.external.postgresql.connection_context.ConnectionContext'

    # name: backoff_delays
    # doc: delays in seconds between retries
    # converter: eval
    # OPS - volatile
    #backoff_delays="10, 30, 60, 120, 300"

    # name: wait_log_interval
    # doc: seconds between log during retries
    # converter: int
    # OPS - set once
    #wait_log_interval=10

    # name: transaction_executor_class
    # doc: a class that will execute transactions
    # converter: configman.converters.class_converter
    #transaction_executor_class='socorro.database.transaction_executor.TransactionExecutorWithLimitedBackoff'

[filesystem]

    # if you'd like to have one common database configuration for the
    # all or a subset of the apps, uncomment the +include line below
    # and edit the 'common_database.ini' file instead of using the individual
    # values below.
    #+include /absolute/path/to/common_filesystem.ini
    # or
    #+include ./relative/path/to/common_filesystem.ini

    # name: dump_field
    # doc: the default dump field
    # converter: str
    #dump_field=upload_file_minidump

    # name: dump_file_suffix
    # doc: the suffix used to identify a dump file
    # converter: str
    #dump_file_suffix=.dump

    # name: filesystem_class
    # doc: None
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #filesystem_class='socorro.external.fs.crashstorage.FSLegacyRadixTreeStorage'

    # name: forbidden_keys
    # doc: a list of keys not allowed in a redacted processed crash
    # converter: str
    #forbidden_keys='url, email, user_id, exploitability,json_dump.sensitive,upload_file_minidump_flash1.json_dump.sensitive,upload_file_minidump_flash2.json_dump.sensitive,upload_file_minidump_browser.json_dump.sensitive'

    # name: fs_root
    # doc: a path to a file system
    # converter: socorro.external.fs.crashstorage.<lambda>
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #fs_root='./crashes'

    # name: json_file_suffix
    # doc: the suffix used to identify a json file
    # converter: str
    #json_file_suffix=.json

    # name: jsonz_file_suffix
    # doc: the suffix used to identify a gzipped json file
    # converter: str
    #jsonz_file_suffix=.jsonz

    # name: name_branch_base
    # doc: the directory base name to use for the named radix tree storage
    # converter: str
    #name_branch_base=name

    # name: redactor_class
    # doc: the name of the class that implements a 'redact' method
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #redactor_class='socorro.external.crashstorage_base.Redactor'

    # name: umask
    # doc: umask to use for new files
    # converter: int
    #umask=18

[hbase]
    # if you'd like to have one common database configuration for the
    # all or a subset of the apps, uncomment the +include line below
    # and edit the 'common_database.ini' file instead of using the individual
    # values below.
    #+include /absolute/path/to/common_hbase.ini
    # or
    #+include ./relative/path/to/common_hbase.ini

    # name: backoff_delays
    # doc: delays in seconds between retries
    # converter: socorro.database.transaction_executor.string_to_list_of_ints
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #backoff_delays=10, 30, 60, 120, 300

    # name: dump_file_suffix
    # doc: the suffix used to identify a dump file (for use in temp files)
    # converter: str
    #dump_file_suffix=.dump

    # name: forbidden_keys
    # doc: a list of keys not allowed in a redacted processed crash
    # converter: str
    #forbidden_keys='url, email, user_id, exploitability,json_dump.sensitive,upload_file_minidump_flash1.json_dump.sensitive,upload_file_minidump_flash2.json_dump.sensitive,upload_file_minidump_browser.json_dump.sensitive'

    # name: hbase_class
    # doc: None
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #hbase_class='socorro.external.hb.crashstorage.HBaseCrashStorage'

    # name: hbase_connection_context_class
    # doc: the class responsible for proving an hbase connection
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #hbase_connection_context_class='socorro.external.hb.connection_context.HBaseConnectionContext'

    # name: hbase_host
    # doc: Host to HBase server
    # converter: str
    #hbase_host=localhost

    # name: hbase_port
    # doc: Port to HBase server
    # converter: int
    #hbase_port=9090

    # name: hbase_timeout
    # doc: timeout in milliseconds for an HBase connection
    # converter: int
    #hbase_timeout=5000

    # name: new_crash_limit
    # doc: the maximum number of new crashes to yield at a time
    # converter: int
    #new_crash_limit=1000000

    # name: redactor_class
    # doc: the name of the class that implements a 'redact' method
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #redactor_class='socorro.external.crashstorage_base.Redactor'

    # name: temporary_file_system_storage_path
    # doc: a local filesystem path where dumps temporarily during processing
    # converter: str
    #temporary_file_system_storage_path=/tmp

    # name: transaction_executor_class
    # doc: a class that will execute transactions
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #transaction_executor_class='socorro.database.transaction_executor.TransactionExecutorWithInfiniteBackoff'

    # name: wait_log_interval
    # doc: seconds between log during retries
    # converter: int
    #wait_log_interval=10

[http]

    [[correlations]]

        # name: base_url
        # doc: Base URL where correlations text files are
        # converter: str
        #base_url=https://crash-analysis.mozilla.com/crash_analysis/

        # name: save_download
        # doc: Whether files downloaded for correlations should be temporary stored on disk
        # converter: configman.converters.boolean_converter
        # Inspect the automatically written value below to make sure it is valid
        #   as a Python object for its intended converter function.
        #save_download='True'

        # name: save_root
        # doc: Directory where the temporary downloads are stored (if left empty will become the systems tmp directory)
        # converter: str
        #save_root=

        # name: save_seconds
        # doc: Number of seconds that the downloaded .txt file is stored in a temporary place
        # converter: int
        #save_seconds=600

[rabbitmq]
    # if you'd like to have one common database configuration for the
    # all or a subset of the apps, uncomment the +include line below
    # and edit the 'common_database.ini' file instead of using the individual
    # values below.
    #+include /absolute/path/to/common_rabbitmq.ini
    # or
    #+include ./relative/path/to/common_rabbitmq.ini

    # name: host
    # doc: the hostname of the RabbitMQ server
    # converter: str
    #host=localhost

    # name: port
    # doc: the port for the RabbitMQ server
    # converter: int
    #port=5672

    # name: priority_queue_name
    # doc: the name of priority crash queue name within RabbitMQ
    # converter: str
    #priority_queue_name=socorro.priority

    # name: rabbitmq_class
    # doc: None
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #rabbitmq_class='socorro.external.rabbitmq.connection_context.ConnectionContext'

    # name: rabbitmq_connection_wrapper_class
    # doc: a classname for the type of wrapper for RabbitMQ connections
    # converter: configman.converters.class_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    #rabbitmq_connection_wrapper_class='socorro.external.rabbitmq.connection_context.Connection'

    # name: rabbitmq_password
    # doc: the user's RabbitMQ password
    # converter: str
    #rabbitmq_password=aPassword

    # name: rabbitmq_user
    # doc: the name of the user within the RabbitMQ instance
    # converter: str
    #rabbitmq_user=rabbit-user

    # name: standard_queue_name
    # doc: the name of standard crash queue name within RabbitMQ
    # converter: str
    #standard_queue_name=socorro.normal

    # name: virtual_host
    # doc: the name of the RabbitMQ virtual host
    # converter: str
    #virtual_host=socorro-stage

[implementations]

    # name: implementation_list
    # doc: list of packages for service implementations
    # converter: items_list_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    implementation_list='psql:socorro.external.postgresql, fs:socorro.external.fs, es:socorro.external.elasticsearch,  http:socorro.external.http, rabbitmq:socorro.external.rabbitmq, hbase:socorro.external.hb'

    # name: service_overrides
    # doc: comma separated list of class overrides, e.g `Crashes: hbase`
    # converter: items_list_converter
    # Inspect the automatically written value below to make sure it is valid
    #   as a Python object for its intended converter function.
    service_overrides='CrashData:fs, Correlations:http, CorrelationsSignatures:http, SuperSearch:es, Priorityjobs:rabbitmq'

[logging]

    # if you'd like to have one common logging configuration for the
    # all or a subset of the apps, uncomment the +include line below
    # and edit the 'common_logging.ini' file instead of using the individual
    # values below.
    #+include /absolute/path/to/common_logging.ini

    # name: stderr_error_logging_level
    # doc: logging level for the logging to stderr (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    #stderr_error_logging_level='10'

    # name: syslog_error_logging_level
    # doc: logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)
    # converter: int
    #syslog_error_logging_level='40'

    # name: stderr_line_format_string
    # doc: python logging system format for logging to stderr
    # converter: str
    #stderr_line_format_string='{asctime} {levelname} - {threadName} - {message}'

    # name: syslog_facility_string
    # doc: syslog facility string ("user", "local0", etc)
    # converter: str
    # OPS - set once
    #syslog_facility_string='user'

    # name: syslog_host
    # doc: syslog hostname
    # converter: str
    # OPS - set once
    #syslog_host='localhost'

    # name: syslog_line_format_string
    # doc: python logging system format for syslog entries
    # converter: str
    #syslog_line_format_string='crontabber (pid {process}): {asctime} {levelname} - {threadName} - {message}'

    # name: syslog_port
    # doc: syslog port
    # converter: int
    # OPS - set once
    #syslog_port='514'

[webapi]

    # name: channels
    # doc: List of release channels, excluding the `release` one.
    # converter: string_to_list
    #channels='beta, aurora, nightly'

    # name: elasticSearchHostname
    # doc: String containing the URI of the Elastic Search instance.
    # converter: str
    #elasticSearchHostname='localhost'

    # name: elasticSearchPort
    # doc: String containing the port on which calling the Elastic Search instance.
    # converter: str
    #elasticSearchPort='9200'

    # name: platforms
    # doc: Array associating OS ids to full names.
    # converter: <lambda>
    #platforms='{"id": "windows", "name": "Windows NT"}, {"id": "mac", "name": "Mac OS X"}, {"id": "linux", "name": "Linux"}'

    # name: restricted_channels
    # doc: List of release channels to restrict based on build ids.
    # converter: string_to_list
    #restricted_channels='beta'

    # name: searchMaxNumberOfDistinctSignatures
    # doc: Integer containing the maximum allowed number of distinct signatures the system should retrieve. Used mainly for performances in ElasticSearch
    # converter: int
    #searchMaxNumberOfDistinctSignatures='1000'

