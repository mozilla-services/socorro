====================
Socorro JSON Schemas
====================

This folder (`socorros/schemas/`) contains JSON Schema files describing the
documents that Socorro generates.

These files will be used as a contract between Socorro and other systems to
which we might send our data.


raw_crash.schema.yaml schema
============================

Adding new annotations
----------------------

.. Note::

   Before adding an annotation to this file, it should be documented in:

   https://github.com/mozilla-services/socorro/tree/main/socorro/schemas

   Further, it requires a data review.

   See
   `Crash Annotations <https://socorro.readthedocs.io/en/latest/annotations.html>`__
   for adding new annotations.

New annotations are added in alphabetical order. The first few annotations in
the schema are generated by the collector. New annotations generated by products
should be after the line::

   # Add new annotations from products below this line.

The template for adding an annotation looks like this::

   AnnotationName:
     description: |
       Description goes here.
     type: string
     permissions: ["protected"]
     data_review:
       - url
     bugs:
       - url
     examples: ["xxx", "yyy"]

See the file for examples.

Field details:

**data_reviews**
   This is a list of one or more urls to data reviews for this annotation.

   Example::

      data_reviews:
        - https://bugzilla.mozilla.org/show_bug.cgi?id=1697875#c8

**description**
   The description is formatted with Markdown.

   The schema is specified with YAML, so you can use ``>`` to denote multiline
   descriptions which don't have empty lines and ``|`` to denote multiline
   descriptions that do have empty lines. If in doubt, use ``|``.

   Example::

      description: |
        Amount of free physical memory in bytes.
        - Under Windows, populated with the contents of the `MEMORYSTATUSEX`
          structure `ullAvailPhys` field.
        - Under macOS, populated with `vm_statistics64_data_t::free_count`.
        - Under Linux, populated with `/proc/meminfo` `xMemFree`.
        - Not available on other platforms.

**permissions**
   This is the list of permissions required to view this field.

   If the field can be public, do this::

       permissions: ["public"]

   Otherwise, the field is protected, so do this::

       permissions: ["protected"]

**type**
    This is the type of the field value.

    With the exception of some of the collector-generated data, this should
    always be ``string`` because crash annotation values are encoded as strings
    in the submitted crash report.

    Example::

       type: string


Removing annotations
--------------------

Annotations can be removed when they're no longer supported.

Make sure the annotation isn't used in processing and isn't the
``source_annotation`` of a processed crash field.


Testing schema changes
-----------------------

After editing the ``raw_crash.schema.yaml`` file verify it still validates.

First, download raw crash files into a crash directory that you want to validate
your changes against. The crash directory can contain raw crash files or it
could contain raw crash files in a directory structure from
``fetch_crash_data``.

Second, run ``validate_raw_crash.py`` against that crash directory.

.. code-block:: shell

   $ python socorro/schemas/validate_raw_crash.py [CRASHDIR]


processed_crash.schema.yaml schema
==================================

socorro-data-1-0-0.schema.yaml
==============================

telemetry_socorro_crash.json schema
===================================

This schema covers documents being sent to Telemetry ingestion.


Modifying
---------

The JSON schema should contain a key called ``$target_version``.

* This is a monotonically increasing integer
* *Don't increment the version* if you're...

  * Adding more keys at the **root level**.
  * Editing comments (content of ``description`` values).

* *Do increment the version* if you're...

  * Adding more keys **inside a nested object**.
  * Changing the type definition of an *existing* key in any way.
  * Add or remove keys from a ``required`` sub-key. For example, if a key
    was required but you've now removed it. This is applicable at any
    nested level.

For example, if you want to add a new field to the root like this:

.. code-block:: diff

   + "addons_checksum": {
   +     "type": ["string", "null"],
   +     "description": "Sample specimen"
   + }


then **don't** change the version.

However, if you add a key inside a nested structure, you have to bump the
``$target_version`` number by 1. For example:

.. code-block:: diff

   @@ -286,8 +286,12 @@
        "json_dump": {
            "type": "object",
            "description": "The dump as a JSON object.",
            "properties": {
   +            "for_example": {
   +                "type": ["string", "null"],
   +                "description": "Brand spanking new field inside json_dump"
   +            },
                "crash_info": {
                    "type": "object",
                    "properties": {
                        "address": {


**Don't change the type definition.** That breaks existing data. You must
create a new field and deprecate the old one.


Testing schema changes
-----------------------

After editing the ``telemetry_socorro_crash.json`` file verify it still
validates.

After any change, you should test that at least 100 randomly picked crashes
from prod. To do that, from a checkout of ``socorro`` run:

.. code-block:: shell

   $ python socorro/schemas/validate_telemetry_socorro_crash.py


Running ``validate_telemetry_socorro_crash.py`` will download 100 crashes, run
the JSON Schema validator against those crashes with your local
``telemetry_socorro_crash.json`` file.

.. Note::

   The ``validate_telemetry_socorro_crash.py``, by default, does a Super Search
   query for basically ``product=Firefox`` and takes the 100 most recent crash
   IDs. This might miss out on some more "rare" crashes whose additional values
   might better test your JSON Schema changes. To remedy that, go to Super
   Search in your browser, make a search that you know includes good crash IDs
   to test and paste that URL like this:

   .. code-block:: shell

      $ python socorro/schemas/validate_telemetry_socorro_crash.py \
            'https://crash-stats.mozilla.org/search/?dom_ipc_enabled=%21__null__&memory_images=%3E10&version=54.0a1' \
            'https://crash-stats.mozilla.org/api/SuperSearch/?memory_private=%3E100&product=Firefox&date=%3E%3D2017-02-24T16%3A14%3A00.000Z&date=%3C2017-03-03T16%3A14%3A00.000Z'
