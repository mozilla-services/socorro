# Irrelevant Signatures
#
# Regular expressions matching frame signatures that should be ignored when
# generating an overall signature.
#
# Read the README.rst for instructions and tips on editing this file.

@0x[0-9a-fA-F]{2,}
@0x[1-9a-fA-F]
__aeabi_fcmpgt
alloc::alloc::__alloc_error_handler::__rg_oom
alloc::alloc::handle_alloc_error
ashmem
__assert_rtn
app_process@0x
AppleIntelHD3000GraphicsGLDriver@
core\.odex@0x
core::panicking::
CrashReporter::TerminateHandler
CrashStatsLogForwarder::CrashAction
__cxa_rethrow
__cxa_throw
_CxxThrowException
dalvik-heap
dalvik-jit-code-cache
dalvik-LinearAlloc
dalvik-mark-stack
data@app@org\.mozilla\.f.*-\d\.apk@classes\.dex@0x
<env_logger::Logger as log::Log>::log::{{closure}}
<env_logger::Logger as log::Log>::log
exp2
.*FNODOBFM
framework\.odex@0x
__fixunsdfsi
__GI___assert_fail
__GI___pthread_mutex_lock
g_assertion_message
g_assertion_message.cold
g_assertion_message_error
g_assertion_message_expr
gdk_x_error
_gdk_x11_display_error_event
get_fpsr
GetLCIDFromLangListNodeWithLICCheck
gfxPlatform::GetPlatform
gkrust_shared::oom_hook::hook
_g_log_abort
g_log
g_log_default_handler
g_log_structured
g_log_structured_array
g_log_structured_standard
g_log_writer_default
g_logv
google_breakpad::CrashGenerationClient::RequestDumpForException
google_breakpad::ExceptionHandler::SignalHandler
google_breakpad::ExceptionHandler::WriteMinidumpWithException
google_breakpad::ReceivePort::WaitForMessage
# NOTE(willkg): we want to skip handle_error but not handle_errorf
handle_error$
KiFastSystemCallRet
libandroid_runtime\.so@0x
libbinder\.so@0x
libEGL\.so@
libdvm\.so\s*@\s*0x
libgui\.so@0x
libicudata.so@
libMali\.so@0x
libutils\.so@0x
libz\.so@0x
linux-gate\.so@0x
log::__private_api_log
mach_msg
_mach_msg
mach_msg_trap
_mach_msg_trap
mnt@asec@org\.mozilla\.f.*-\d@pkg\.apk@classes\.dex@0x
MOZ_Assert
MOZ_Crash
mozalloc_handle_oom
mozglue_static::oom_hook::hook
mozglue_static::panic_hook
mozcrt19.dll@0x
mozilla::CondVar::Wait
mozilla::detail::ConditionVariableImpl
mozilla::gfx::Log<
mozilla::ipc::RPCChannel::Call
mozilla::ipc::WriteIPDLParam
mozilla::ipc::IPDLParamTraits<T>::Write
mozilla::ThreadEventQueue
mozilla::widget::WlCrashHandler
nsEventQueue::GetEvent
_NSRaiseError
nsThread::GetEvent
nsThread::nsChainedEventQueue::GetEvent
mozilla::PrioritizedEventQueue<T>::GetEvent
nsThread::ProcessNextEvent
NS_ProcessNextEvent
(Nt|Zw)?WaitForKeyedEvent
(Nt|Zw)?WaitForSingleObject(Ex)?
(Nt|Zw)?WaitForMultipleObjects(Ex)?
NtWaitForAlertByThreadId
nvmap@0x
objc_begin_catch
objc_msgLookupSuper2
objc_terminate
org\.mozilla\.f.*-\d\.apk@0x
panic_abort::
PR_WaitCondVar
RaiseException
RealMsgWaitFor
_report_gsfailure
__report_gsfailure
_rust_alloc_error_handler
__rust_alloc_error_handler
rust_oom
rtc::FatalMessage
RtlReportCriticalFailure
RtlReportFatalFailure
RtlSleepConditionVariableCS
RtlSleepConditionVariableSRW
RtlpAdjustHeapLookasideDepth
RtlpAnalyzeHeapFailure
RtlpHeapHandleError
RtlpHpHeapHandleError
RtlpLogHeapFailure
RustMozCrash
_sigtramp
__sigtramp
schedule_class_load
_security_check_cookie
__security_check_cookie
SkyLight
SleepConditionVariableCS
SleepConditionVariableSRW
std::_Atomic_fetch_add_4
std::alloc::rust_oom
std::io::stdio::_eprint
std::panicking::
std::sys_common::backtrace::__rust_end_short_backtrace<T>
std::__terminate
std::terminate
system@framework@.*\.jar@classes\.dex@0x
___TERMINATING_DUE_TO_UNCAUGHT_EXCEPTION___

# These frames have platform variants and bucket poorly so we nix them
# from the signature
.*\$VARIANT\$
WaitForSingleObjectExImplementation
WaitForMultipleObjectsExImplementation
_XError
_XReply
_ZdlPv
zero

# Windows-specific fastfail frames
KiFastSystemCall
KiRaiseUserExceptionDispatcher
KiUserApcDispatch
KiUserApcDispatcher
KiUserCallbackDispatch
KiUserCallbackDispatcher
KiUserExceptionDispatch
KiUserExceptionDispatcher
LdrpDispatchUserCallTarget
LdrpHandleInvalidUserCallTarget
LdrpICallHandler
LdrpValidateUserCallTarget
RtlDispatchException
RtlFailFast2
RtlpExecuteHandlerForException
RtlpHandleInvalidUserCallTarget
seh_filter_exe
