---
services:
  # Socorro app image
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - my.env
    depends_on:
      - fakesentry
      - statsd
      - pubsub
      - postgresql
      - legacy-elasticsearch
      - elasticsearch
    volumes:
      - .:/app

  # For development

  # For running tests
  test:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - docker/config/test.env
    depends_on:
      - fakesentry
      - statsd
      - gcs-emulator
      - pubsub
      - postgresql
      - legacy-elasticsearch
      - elasticsearch
    volumes:
      - .:/app

  # For running tests in CI
  test-ci:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - docker/config/test.env
    depends_on:
      - fakesentry
      - statsd
      - gcs-emulator
      - pubsub
      - postgresql
      - legacy-elasticsearch
      - elasticsearch

  devcontainer:
    build:
      dockerfile: .devcontainer/Dockerfile
      args:
        userid: ${USE_UID:-10001}
        groupid: ${USE_GID:-10001}
    image: local/socorro-devcontainer
    entrypoint: ["sleep", "inf"]
    env_file:
      - docker/config/local_dev.env
      - docker/config/test.env
      - my.env
    depends_on:
      - fakesentry
      - statsd
      - gcs-emulator
      - pubsub
      - postgresql
      - legacy-elasticsearch
      - elasticsearch
    volumes:
      - .:/app

  processor:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - my.env
    depends_on:
      - fakesentry
      - statsd
      - gcs-emulator
      - pubsub
      - legacy-elasticsearch
      - elasticsearch
      - symbolsserver
    command: ["processor"]
    volumes:
      - .:/app

  crontabber:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - my.env
    depends_on:
      - fakesentry
      - statsd
      - postgresql
      - legacy-elasticsearch
      - elasticsearch
    command: ["crontabber"]
    volumes:
      - .:/app

  webapp:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - my.env
    depends_on:
      - fakesentry
      - statsd
      - gcs-emulator
      - pubsub
      - postgresql
      - legacy-elasticsearch
      - elasticsearch
      - memcached
      - oidcprovider
    command: ["webapp", "--dev"]
    ports:
      - "8000:8000"
    volumes:
      - .:/app

  stage_submitter:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - my.env
    depends_on:
      - fakesentry
      - gcs-emulator
      - pubsub
    command: ["stage_submitter"]
    volumes:
      - .:/app

  # https://github.com/willkg/kent
  fakesentry:
    build:
      context: docker/images/fakesentry
    image: local/socorro_fakesentry
    ports:
      - "8090:8090"
    command: run --host 0.0.0.0 --port 8090
    stop_signal: SIGINT

  # https://hub.docker.com/r/mozilla/oidc-testprovider
  oidcprovider:
    build:
      context: docker/images/oidcprovider
    image: local/socorro_oidcprovider
    ports:
      - "8080:8080"
    # The next line can be removed if this PR is included in the image we use:
    # https://github.com/mozilla/docker-test-mozilla-django-oidc/pull/84
    stop_signal: SIGKILL

  # -----------------------------
  # External services
  # -----------------------------

  # https://hub.docker.com/r/mozilla/socorro_collector/
  #
  # This pulls the latest Antenna and treats it as an external service.
  #
  # This uses the development ./bin/run_web.sh script from the Antenna
  # container since that creates a bucket before running Antenna.
  collector:
    image: mozilla/socorro_collector:latest
    env_file:
      - docker/config/local_dev.env
      - my.env
    depends_on:
      - gcs-emulator
      - pubsub
      - statsd
    expose:
      - 8000
    ports:
      - "8888:8000"
    volumes:
      - .:/socorro

  fakecollector:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - my.env
    command: ["fakecollector"]
    ports:
      - "9000:8000"
    volumes:
      - .:/app

  symbolsserver:
    image: local/socorro_app
    env_file:
      - docker/config/local_dev.env
      - my.env
    command: ["symbolsserver"]
    stop_signal: SIGINT
    ports:
      - "8070:8070"
    volumes:
      - .:/app

  # https://hub.docker.com/r/hopsoft/graphite-statsd/
  statsd:
    image: hopsoft/graphite-statsd
    ports:
      - "8081:80"
      - "2003-2004:2003-2004"
      - "2023-2024:2023-2024"
      - "8125:8125/udp"
      - "8126:8126"

  # https://hub.docker.com/_/elasticsearch/
  legacy-elasticsearch:
    image: mozilla/socorro_elasticsearch:1.4.5
    ports:
      - "9200:9200"

  # https://www.elastic.co/guide/en/elasticsearch/reference/8.14/docker.html
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    mem_limit: 1g
    command:
      - bin/elasticsearch
      - -Expack.security.enabled=false
      - -Ediscovery.type=single-node
    ports:
      - "9201:9200"

  # https://hub.docker.com/_/postgres/
  postgresql:
    image: postgres:16.4
    ports:
      - "8574:5432"
    environment:
      # Create the superuser account
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=socorro

  # https://cloud.google.com/sdk/docs/downloads-docker
  # official pubsub emulator
  pubsub:
    # also available as google/cloud-sdk:<version>-emulators
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:463.0.0-emulators
    command:
      - gcloud
      - beta
      - emulators
      - pubsub
      - start
      - --host-port=0.0.0.0:${PUBSUB_PORT:-5010}
    ports:
      - 5010:5010
    stop_signal: SIGINT

  # https://hub.docker.com/_/memcached/
  memcached:
    image: memcached:1.5.1
    ports:
      - "11211:11211"

  # https://github.com/fsouza/fake-gcs-server
  # Fake GCP GCS server for local development and testing
  gcs-emulator:
    build:
      context: docker/images/gcs-emulator
    image: local/socorro_gcs_emulator
    command: -port 8001 -scheme http
    ports:
      - "${EXPOSE_GCS_EMULATOR_PORT:-8001}:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "--insecure", "http://localhost:8001/storage/v1/b"]
      interval: 1s
      timeout: 3s
      retries: 5
