# docker-compose for Socorro development.
#
# Note: Requires docker-comopse 1.10+.
version: "2"
services:
  # Socorro base image
  base:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: local/socorro_base

  # Processor app
  processor:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.processor
    image: local/socorro_processor
    env_file:
      - docker/config/local_dev.env
      - docker/config/never_on_a_server.env
      - docker/config/processor.env
      - my.env
    depends_on:
      # - statsd -- FIXME(willkg): broken for some reason
      - localstack-s3
      - postgresql
      - elasticsearch
      - rabbitmq
    volumes:
      - .:/app

  # Webapp app
  webapp:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.webapp
    image: local/socorro_webapp
    env_file:
      - docker/config/local_dev.env
      - docker/config/never_on_a_server.env
      - docker/config/webapp.env
      - my.env
    depends_on:
      # - statsd -- FIXME(willkg): broken for some reason
      - localstack-s3
      - postgresql
      - elasticsearch
      - rabbitmq
      - memcached
    command: ["/app/docker/run_webapp.sh", "--dev"]
    ports:
      - "8000:8000"
    volumes:
      - .:/app

  # Crontabber app
  crontabber:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.crontabber
    image: local/socorro_crontabber
    env_file:
      - docker/config/local_dev.env
      - docker/config/never_on_a_server.env
      - docker/config/crontabber.env
      - my.env
    depends_on:
      - localstack-s3
      - postgresql
      - elasticsearch
      - rabbitmq
    volumes:
      - .:/app

  # -----------------------------
  # External services
  # -----------------------------

  # https://hub.docker.com/r/mozilla/antenna/
  # This seems weird, but for the purposes of Socorro, we should treat
  # it as an external service.
  antenna:
    image: mozilla/antenna:latest
    environment:
      - LOGGING_LEVEL=INFO
      - CRASHSTORAGE_CLASS=antenna.ext.s3.crashstorage.S3CrashStorage
      - CRASHSTORAGE_ENDPOINT_URL=http://localstack-s3:5000
      - CRASHSTORAGE_REGION=us-west-2
      - CRASHSTORAGE_ACCESS_KEY=foo
      - CRASHSTORAGE_SECRET_ACCESS_KEY=foo
      - CRASHSTORAGE_BUCKET_NAME=dev_bucket
    ports:
      - "8888:8000"

  # https://hub.docker.com/r/kamon/grafana_graphite/
  # username: admin, password: admin
  statsd:
    image: kamon/grafana_graphite
    ports:
      - "8080:3000"  # grafana port

  # https://hub.docker.com/_/elasticsearch/
  # Note: This image is deprecated, but the new one requires fiddling.
  elasticsearch:
    image: elasticsearch:1.4.5
    ports:
      - "9200:9200"
      - "9300:9300"

  # https://hub.docker.com/_/rabbitmq/
  rabbitmq:
    image: rabbitmq:3.6.9
    environment:
      - RABBITMQ_DEFAULT_USER=rabbituser
      - RABBITMQ_DEFAULT_PASS=rabbitpwd
      - RABBITMQ_DEFAULT_VHOST=rabbitvhost

  # https://hub.docker.com/_/postgres/
  postgresql:
    image: postgres:9.4
    environment:
      # Create the superuser account
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=aPassword
      - POSTGRES_DB=breakpad

  # https://hub.docker.com/r/localstack/localstack/
  # localstack running a fake S3
  localstack-s3:
    image: localstack/localstack:0.7.4
    environment:
      - SERVICES=s3:5000
      - DEFAULT_REGION=us-west-2
      - HOSTNAME=localstack-s3
    ports:
      - "5000:5000"

  # https://hub.docker.com/_/memcached/
  memcached:
    image: memcached:1.5.1
    ports:
      - "11211:11211"
